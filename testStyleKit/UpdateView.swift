//
//  UpdateView.swift
//
//  Created on 11/16/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//
import UIKit

class update{
    //COMPROBAR VERSIÓN:-----------------------------------------------------
    func checkVersion(urlComprobacion:URL)-> String{
        var lastVersion: String = "Actualizada"
        if let appName = Bundle.main.infoDictionary!["CFBundleName"] as? String{print("NOMBRE: \(appName)")
            if let appVersion = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String {print("VERSION: \(appVersion)")
                
               let request = NSMutableURLRequest(url:urlComprobacion)
                request.httpMethod = "POST"
                request.httpBody = ("nombre=\(appName)&version=\(appVersion)&tipo=ios").data(using: String.Encoding.utf8)
                let task = URLSession.shared.dataTask(with: request as URLRequest) { (data,response,error) in
                    if error != nil{ print("error=\(String(describing: error))");return}
                    
                    if let jsonString = try? JSONSerialization.jsonObject(with: data!, options: []) as! [String: String]{
                        if jsonString ["status"] != "version_actual"{
                            
                            var window: UIWindow?
                            window = UIWindow(frame:UIScreen.main.bounds)
                            let updateView = updateViewController()
                            window?.rootViewController = updateView
                            window?.makeKeyAndVisible()

                            lastVersion = "No Actualizada"
                            print("Hay una Nueva Versión")
                            
                            
                        }else{ print("Versión Actual")}
                    }
                    
                }
               
            }
        }
        return lastVersion
    }
 
    
}




class updateViewController: UIViewController {
    
      var img = UIImage()
    override func viewDidLoad() {
        super.viewDidLoad()
        
       
        let width = UIScreen.main.applicationFrame.size.width
        
        let actualizarButton = UIButton(frame: CGRect(x: 8, y: view.frame.maxY - 70, width: width - 16, height: 50))
        actualizarButton.backgroundColor = UIColor(red:0.086 ,green:0.502 ,blue:0.980 ,alpha: 1)
        actualizarButton.setTitle("Actualizar", for: .normal)
        actualizarButton.layer.cornerRadius = 12
        actualizarButton.clipsToBounds = true
        actualizarButton.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)
        self.view.backgroundColor = .white

       
        self.view.addSubview(actualizarButton)
        
        
      

    }
    
   
    
    @objc func buttonAction(sender: UIButton!) {
        print("Actualizar")
        let url = URL(string: "https://webestatal.pgjguanajuato.gob.mx:8443/Web/ADM/ipa/cell.ipa")
        if UIApplication.shared.canOpenURL(url!) {
            UIApplication.shared.open(url!, options: [:], completionHandler: nil)
            //If you want handle the completion block than
            UIApplication.shared.open(url!, options: [:], completionHandler: { (success) in
                
                print("Open url : \(success)")
            })
        }
    }
 
    
}



@IBDesignable
class styleKitview: UIView {
    
    
    // Only override draw() if you perform custom drawing.
    // An empty implementation adversely affects performance during animation.
    override func draw(_ rect: CGRect) {
        UpdateView.drawUpdate(frame: self.bounds)
        
       
    }
    
}



class UpdateView: NSObject {
      
      
      //MARK: - Canvas Drawings
      
      /// Page 1
      
      class func drawUpdate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 568), resizing: ResizingBehavior = .aspectFit) {
            /// General Declarations
            let context = UIGraphicsGetCurrentContext()!
            
            /// Resize to Target Frame
            context.saveGState()
            let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 568), target: targetFrame)
            context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
            context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 568)
            
            /// descripcion
            do {
                  context.saveGState()
                  context.translateBy(x: 2, y: 168)
                  
                  /// Hay una nueva Actual
                  let hayUnaNuevaActual = NSMutableAttributedString(string: "Hay una nueva Actualización")
                  hayUnaNuevaActual.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: hayUnaNuevaActual.length))
                  hayUnaNuevaActual.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.056, brightness: 0.149, alpha: 1), range: NSRange(location: 0, length: hayUnaNuevaActual.length))
                  do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        hayUnaNuevaActual.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: hayUnaNuevaActual.length))
                  }
                  context.saveGState()
                  hayUnaNuevaActual.draw(in: CGRect(x: 0, y: 0, width: 320, height: 25))
                  context.restoreGState()
                  
                  /// Actualizamos nuestra
                  let actualizamosNuestra = NSMutableAttributedString(string: "Actualizamos nuestras aplicaciones regularmente para ofrecerte un mejor servicio.")
                  actualizamosNuestra.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: actualizamosNuestra.length))
                  actualizamosNuestra.addAttribute(.foregroundColor, value: UIColor(hue: 0.996, saturation: 0.02, brightness: 0.365, alpha: 1), range: NSRange(location: 0, length: actualizamosNuestra.length))
                  do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        actualizamosNuestra.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: actualizamosNuestra.length))
                  }
                  context.saveGState()
                  actualizamosNuestra.draw(in: CGRect(x: 0, y: 29, width: 320, height: 31))
                  context.restoreGState()
                  
                  context.restoreGState()
            }
            /// gto
            do {
                  context.saveGState()
                  context.translateBy(x: 83, y: 18)
                  
                  /// g
                  do {
                        context.saveGState()
                        context.translateBy(x: 0, y: 14)
                        
                        /// Path 2
                        let path2 = UIBezierPath()
                        path2.move(to: CGPoint(x: 7.08, y: 47.35))
                        path2.addLine(to: CGPoint(x: 5.81, y: 48.49))
                        path2.addLine(to: CGPoint(x: 4.66, y: 50.15))
                        path2.addLine(to: CGPoint(x: 3.88, y: 51.41))
                        path2.addLine(to: CGPoint(x: 3.26, y: 52.49))
                        path2.addLine(to: CGPoint(x: 2.57, y: 53.89))
                        path2.addLine(to: CGPoint(x: 1.87, y: 55.59))
                        path2.addLine(to: CGPoint(x: 1.46, y: 56.97))
                        path2.addLine(to: CGPoint(x: 1.18, y: 58.65))
                        path2.addLine(to: CGPoint(x: 0.95, y: 60.02))
                        path2.addLine(to: CGPoint(x: 0.95, y: 61.83))
                        path2.addLine(to: CGPoint(x: 0.95, y: 63.28))
                        path2.addLine(to: CGPoint(x: 0.95, y: 65.12))
                        path2.addLine(to: CGPoint(x: 1.18, y: 66.23))
                        path2.addLine(to: CGPoint(x: 1.46, y: 68))
                        path2.addLine(to: CGPoint(x: 2.13, y: 69.79))
                        path2.addLine(to: CGPoint(x: 2.89, y: 71.54))
                        path2.addLine(to: CGPoint(x: 4.01, y: 73.39))
                        path2.addLine(to: CGPoint(x: 5.1, y: 75.1))
                        path2.addLine(to: CGPoint(x: 6.38, y: 76.57))
                        path2.addLine(to: CGPoint(x: 7.26, y: 77.64))
                        path2.addLine(to: CGPoint(x: 8.54, y: 78.61))
                        path2.addLine(to: CGPoint(x: 9.83, y: 79.64))
                        path2.addLine(to: CGPoint(x: 11.52, y: 80.81))
                        path2.addLine(to: CGPoint(x: 13.2, y: 81.9))
                        path2.addLine(to: CGPoint(x: 14.6, y: 82.39))
                        path2.addLine(to: CGPoint(x: 16.12, y: 82.75))
                        path2.addLine(to: CGPoint(x: 17.53, y: 83))
                        path2.addLine(to: CGPoint(x: 15.84, y: 80.81))
                        path2.addLine(to: CGPoint(x: 14.78, y: 79.3))
                        path2.addLine(to: CGPoint(x: 13.93, y: 77.99))
                        path2.addLine(to: CGPoint(x: 13.74, y: 76.75))
                        path2.addLine(to: CGPoint(x: 13.51, y: 75.1))
                        path2.addLine(to: CGPoint(x: 13.2, y: 74.12))
                        path2.addLine(to: CGPoint(x: 13.2, y: 71.54))
                        path2.addLine(to: CGPoint(x: 13.2, y: 68.97))
                        path2.addLine(to: CGPoint(x: 13.74, y: 66.79))
                        path2.addLine(to: CGPoint(x: 14.6, y: 64.38))
                        path2.addLine(to: CGPoint(x: 15.84, y: 62.26))
                        path2.addLine(to: CGPoint(x: 16.99, y: 60.34))
                        path2.addLine(to: CGPoint(x: 18.2, y: 58.65))
                        path2.addLine(to: CGPoint(x: 19.38, y: 57.35))
                        path2.addLine(to: CGPoint(x: 20.79, y: 56.97))
                        path2.addLine(to: CGPoint(x: 21.76, y: 56.64))
                        path2.addLine(to: CGPoint(x: 22.67, y: 56.64))
                        path2.addLine(to: CGPoint(x: 23.67, y: 56.97))
                        path2.addLine(to: CGPoint(x: 24.98, y: 57.35))
                        path2.addLine(to: CGPoint(x: 26.61, y: 57.35))
                        path2.addLine(to: CGPoint(x: 29.02, y: 57.35))
                        path2.addLine(to: CGPoint(x: 30.89, y: 57.17))
                        path2.addLine(to: CGPoint(x: 32.65, y: 57.17))
                        path2.addLine(to: CGPoint(x: 34.87, y: 56.64))
                        path2.addLine(to: CGPoint(x: 36.72, y: 56.16))
                        path2.addLine(to: CGPoint(x: 38.54, y: 55.59))
                        path2.addLine(to: CGPoint(x: 40.58, y: 54.86))
                        path2.addLine(to: CGPoint(x: 42.56, y: 53.89))
                        path2.addLine(to: CGPoint(x: 43.78, y: 53.1))
                        path2.addLine(to: CGPoint(x: 46.53, y: 51.41))
                        path2.addLine(to: CGPoint(x: 48.31, y: 49.62))
                        path2.addLine(to: CGPoint(x: 49.72, y: 48.11))
                        path2.addLine(to: CGPoint(x: 51.68, y: 45.7))
                        path2.addLine(to: CGPoint(x: 53.08, y: 43.79))
                        path2.addLine(to: CGPoint(x: 54.27, y: 41.48))
                        path2.addLine(to: CGPoint(x: 55.26, y: 39.09))
                        path2.addLine(to: CGPoint(x: 56.09, y: 36.67))
                        path2.addLine(to: CGPoint(x: 56.66, y: 33.77))
                        path2.addLine(to: CGPoint(x: 56.97, y: 31.4))
                        path2.addLine(to: CGPoint(x: 56.97, y: 27.99))
                        path2.addLine(to: CGPoint(x: 56.97, y: 25.97))
                        path2.addLine(to: CGPoint(x: 56.66, y: 23.67))
                        path2.addLine(to: CGPoint(x: 56.09, y: 21.36))
                        path2.addLine(to: CGPoint(x: 55.61, y: 19.56))
                        path2.addLine(to: CGPoint(x: 54.87, y: 17.67))
                        path2.addLine(to: CGPoint(x: 54.27, y: 16.15))
                        path2.addLine(to: CGPoint(x: 53.91, y: 15.92))
                        path2.addLine(to: CGPoint(x: 56.66, y: 15.92))
                        path2.addLine(to: CGPoint(x: 56.97, y: 15.04))
                        path2.addLine(to: CGPoint(x: 57.53, y: 12.2))
                        path2.addLine(to: CGPoint(x: 58.21, y: 7.94))
                        path2.addLine(to: CGPoint(x: 58.96, y: 4.5))
                        path2.addLine(to: CGPoint(x: 59.82, y: 0.76))
                        path2.addLine(to: CGPoint(x: 60, y: 0))
                        path2.addLine(to: CGPoint(x: 54.87, y: 0))
                        path2.addLine(to: CGPoint(x: 48.75, y: 0))
                        path2.addLine(to: CGPoint(x: 24.62, y: 0))
                        path2.addLine(to: CGPoint(x: 22.21, y: 0.42))
                        path2.addLine(to: CGPoint(x: 19.64, y: 1.25))
                        path2.addLine(to: CGPoint(x: 16.99, y: 2.44))
                        path2.addLine(to: CGPoint(x: 14.6, y: 3.5))
                        path2.addLine(to: CGPoint(x: 11.9, y: 5.16))
                        path2.addLine(to: CGPoint(x: 10.07, y: 6.24))
                        path2.addLine(to: CGPoint(x: 8.54, y: 7.43))
                        path2.addLine(to: CGPoint(x: 7.08, y: 9.23))
                        path2.addLine(to: CGPoint(x: 5.55, y: 10.8))
                        path2.addLine(to: CGPoint(x: 4.87, y: 11.97))
                        path2.addLine(to: CGPoint(x: 3.88, y: 13.6))
                        path2.addLine(to: CGPoint(x: 2.89, y: 15.26))
                        path2.addLine(to: CGPoint(x: 1.87, y: 16.78))
                        path2.addLine(to: CGPoint(x: 1.18, y: 18.13))
                        path2.addLine(to: CGPoint(x: 0.71, y: 20.26))
                        path2.addLine(to: CGPoint(x: 0.34, y: 22.71))
                        path2.addLine(to: CGPoint(x: 0, y: 24.95))
                        path2.addLine(to: CGPoint(x: 0, y: 27.32))
                        path2.addLine(to: CGPoint(x: 0, y: 31.11))
                        path2.addLine(to: CGPoint(x: 0, y: 33.12))
                        path2.addLine(to: CGPoint(x: 0.34, y: 36.19))
                        path2.addLine(to: CGPoint(x: 1.18, y: 37.51))
                        path2.addLine(to: CGPoint(x: 1.87, y: 39.87))
                        path2.addLine(to: CGPoint(x: 2.89, y: 41.5))
                        path2.addLine(to: CGPoint(x: 4.01, y: 43.33))
                        path2.addLine(to: CGPoint(x: 5.1, y: 44.99))
                        path2.addLine(to: CGPoint(x: 7.08, y: 47.35))
                        path2.close()
                        path2.move(to: CGPoint(x: 7.08, y: 47.35))
                        context.saveGState()
                        context.translateBy(x: 1, y: 0)
                        path2.usesEvenOddFillRule = true
                        context.saveGState()
                        path2.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                          UIColor(hue: 0.55, saturation: 0.813, brightness: 0.882, alpha: 1).cgColor,
                                          UIColor(hue: 0.571, saturation: 0.878, brightness: 0.482, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                              start: CGPoint(x: 30, y: 0),
                              end: CGPoint(x: 30, y: 83),
                              options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Oval 3
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 58, height: 58))
                        context.saveGState()
                        context.saveGState()
                        oval3.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                          UIColor(hue: 0.55, saturation: 0.809, brightness: 0.882, alpha: 1).cgColor,
                                          UIColor(hue: 0.561, saturation: 0.847, brightness: 0.616, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                              start: CGPoint(x: 29, y: 1.99),
                              end: CGPoint(x: 29, y: 58),
                              options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Oval 4
                        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 23, height: 23))
                        context.saveGState()
                        context.translateBy(x: 18, y: 18)
                        UIColor(hue: 1, saturation: 0.006, brightness: 1, alpha: 1).setFill()
                        oval4.fill()
                        context.restoreGState()
                        
                        /// Path 4
                        let path4 = UIBezierPath()
                        path4.move(to: CGPoint(x: 3.37, y: 2.2))
                        path4.addLine(to: CGPoint(x: 2.08, y: 3.97))
                        path4.addLine(to: CGPoint(x: 1.31, y: 5.41))
                        path4.addLine(to: CGPoint(x: 0.72, y: 7.08))
                        path4.addLine(to: CGPoint(x: 0.33, y: 8.62))
                        path4.addLine(to: CGPoint(x: 0, y: 10.95))
                        path4.addLine(to: CGPoint(x: 0, y: 11.91))
                        path4.addLine(to: CGPoint(x: 0, y: 13.53))
                        path4.addLine(to: CGPoint(x: 0, y: 15.21))
                        path4.addLine(to: CGPoint(x: 0.2, y: 16.82))
                        path4.addLine(to: CGPoint(x: 0.54, y: 18.43))
                        path4.addLine(to: CGPoint(x: 1.05, y: 19.8))
                        path4.addLine(to: CGPoint(x: 1.68, y: 21.29))
                        path4.addLine(to: CGPoint(x: 2.38, y: 22.77))
                        path4.addLine(to: CGPoint(x: 3.15, y: 23.62))
                        path4.addLine(to: CGPoint(x: 3.85, y: 24.15))
                        path4.addLine(to: CGPoint(x: 4.89, y: 24.56))
                        path4.addLine(to: CGPoint(x: 6.03, y: 24.74))
                        path4.addLine(to: CGPoint(x: 7.11, y: 25))
                        path4.addLine(to: CGPoint(x: 8.16, y: 25))
                        path4.addLine(to: CGPoint(x: 9.19, y: 25))
                        path4.addLine(to: CGPoint(x: 10.45, y: 25))
                        path4.addLine(to: CGPoint(x: 11.51, y: 25))
                        path4.addLine(to: CGPoint(x: 12.9, y: 24.74))
                        path4.addLine(to: CGPoint(x: 13.95, y: 24.56))
                        path4.addLine(to: CGPoint(x: 15.11, y: 24.34))
                        path4.addLine(to: CGPoint(x: 16.45, y: 23.86))
                        path4.addLine(to: CGPoint(x: 17.87, y: 23.34))
                        path4.addLine(to: CGPoint(x: 19.11, y: 22.77))
                        path4.addLine(to: CGPoint(x: 20.57, y: 21.98))
                        path4.addLine(to: CGPoint(x: 21.46, y: 21.29))
                        path4.addLine(to: CGPoint(x: 22.75, y: 20.49))
                        path4.addLine(to: CGPoint(x: 23.79, y: 19.48))
                        path4.addLine(to: CGPoint(x: 24.45, y: 18.76))
                        path4.addLine(to: CGPoint(x: 25.53, y: 17.69))
                        path4.addLine(to: CGPoint(x: 26.41, y: 17.06))
                        path4.addLine(to: CGPoint(x: 27.12, y: 16.82))
                        path4.addLine(to: CGPoint(x: 28.16, y: 16.56))
                        path4.addLine(to: CGPoint(x: 29.08, y: 16.56))
                        path4.addLine(to: CGPoint(x: 30.21, y: 16.56))
                        path4.addLine(to: CGPoint(x: 31.19, y: 16.82))
                        path4.addLine(to: CGPoint(x: 31.8, y: 17.24))
                        path4.addLine(to: CGPoint(x: 32.43, y: 17.69))
                        path4.addLine(to: CGPoint(x: 33.04, y: 18.43))
                        path4.addLine(to: CGPoint(x: 33.43, y: 18.95))
                        path4.addLine(to: CGPoint(x: 33.92, y: 19.8))
                        path4.addLine(to: CGPoint(x: 34.07, y: 20.29))
                        path4.addLine(to: CGPoint(x: 34.07, y: 21.11))
                        path4.addLine(to: CGPoint(x: 34.07, y: 21.57))
                        path4.addLine(to: CGPoint(x: 34.07, y: 22.28))
                        path4.addLine(to: CGPoint(x: 34.74, y: 22.28))
                        path4.addLine(to: CGPoint(x: 35.41, y: 22.28))
                        path4.addLine(to: CGPoint(x: 36.76, y: 22.28))
                        path4.addLine(to: CGPoint(x: 51, y: 22.28))
                        path4.addLine(to: CGPoint(x: 51, y: 20.49))
                        path4.addLine(to: CGPoint(x: 50.8, y: 19.48))
                        path4.addLine(to: CGPoint(x: 50.36, y: 17.69))
                        path4.addLine(to: CGPoint(x: 49.99, y: 16.06))
                        path4.addLine(to: CGPoint(x: 49.36, y: 14.28))
                        path4.addLine(to: CGPoint(x: 48.73, y: 12.94))
                        path4.addLine(to: CGPoint(x: 48.06, y: 11.43))
                        path4.addLine(to: CGPoint(x: 47.52, y: 10.34))
                        path4.addLine(to: CGPoint(x: 47.07, y: 9.41))
                        path4.addLine(to: CGPoint(x: 46.44, y: 8.45))
                        path4.addLine(to: CGPoint(x: 45.62, y: 7.62))
                        path4.addLine(to: CGPoint(x: 44.64, y: 6.7))
                        path4.addLine(to: CGPoint(x: 43.48, y: 5.67))
                        path4.addLine(to: CGPoint(x: 42.36, y: 4.77))
                        path4.addLine(to: CGPoint(x: 41.21, y: 3.97))
                        path4.addLine(to: CGPoint(x: 39.78, y: 2.96))
                        path4.addLine(to: CGPoint(x: 38.86, y: 2.2))
                        path4.addLine(to: CGPoint(x: 37.75, y: 1.92))
                        path4.addLine(to: CGPoint(x: 36.76, y: 1.56))
                        path4.addLine(to: CGPoint(x: 34.97, y: 0.91))
                        path4.addLine(to: CGPoint(x: 33.76, y: 0.69))
                        path4.addLine(to: CGPoint(x: 32.22, y: 0.36))
                        path4.addLine(to: CGPoint(x: 31.19, y: 0.18))
                        path4.addLine(to: CGPoint(x: 29.75, y: 0))
                        path4.addLine(to: CGPoint(x: 28.16, y: 0))
                        path4.addLine(to: CGPoint(x: 26.23, y: 0))
                        path4.addLine(to: CGPoint(x: 24.19, y: 0.18))
                        path4.addLine(to: CGPoint(x: 22.6, y: 0.49))
                        path4.addLine(to: CGPoint(x: 21.46, y: 0.91))
                        path4.addLine(to: CGPoint(x: 20.28, y: 1.56))
                        path4.addLine(to: CGPoint(x: 18.93, y: 2.2))
                        path4.addLine(to: CGPoint(x: 17.87, y: 2.96))
                        path4.addLine(to: CGPoint(x: 16.45, y: 3.97))
                        path4.addLine(to: CGPoint(x: 15.51, y: 4.61))
                        path4.addLine(to: CGPoint(x: 14.5, y: 5.41))
                        path4.addLine(to: CGPoint(x: 13.41, y: 6.28))
                        path4.addLine(to: CGPoint(x: 12.53, y: 7.08))
                        path4.addLine(to: CGPoint(x: 11.69, y: 7.79))
                        path4.addLine(to: CGPoint(x: 10.82, y: 8.29))
                        path4.addLine(to: CGPoint(x: 9.58, y: 8.45))
                        path4.addLine(to: CGPoint(x: 8.16, y: 8.29))
                        path4.addLine(to: CGPoint(x: 6.88, y: 8.01))
                        path4.addLine(to: CGPoint(x: 6.03, y: 7.46))
                        path4.addLine(to: CGPoint(x: 5.19, y: 6.44))
                        path4.addLine(to: CGPoint(x: 4.35, y: 5.41))
                        path4.addLine(to: CGPoint(x: 3.85, y: 4.47))
                        path4.addLine(to: CGPoint(x: 3.54, y: 3.27))
                        path4.addLine(to: CGPoint(x: 3.37, y: 2.2))
                        path4.close()
                        path4.move(to: CGPoint(x: 3.37, y: 2.2))
                        context.saveGState()
                        context.translateBy(x: 13, y: 58)
                        path4.usesEvenOddFillRule = true
                        context.saveGState()
                        path4.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                          UIColor(hue: 0.349, saturation: 0.574, brightness: 0.369, alpha: 1).cgColor,
                                          UIColor(hue: 0.237, saturation: 0.668, brightness: 0.78, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                              start: CGPoint(x: 0, y: 13.68),
                              end: CGPoint(x: 49.69, y: 13.68),
                              options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                        context.restoreGState()
                        
                        context.restoreGState()
                  }
                  
                  /// t
                  do {
                        context.saveGState()
                        context.translateBy(x: 66, y: 0)
                        
                        /// Path 5
                        let path5 = UIBezierPath()
                        path5.move(to: CGPoint(x: 0.76, y: 1.36))
                        path5.addLine(to: CGPoint(x: 18.53, y: 0))
                        path5.addLine(to: CGPoint(x: 18.53, y: 13.3))
                        path5.addLine(to: CGPoint(x: 35, y: 13.3))
                        path5.addLine(to: CGPoint(x: 32.02, y: 28.41))
                        path5.addLine(to: CGPoint(x: 18.53, y: 28.41))
                        path5.addLine(to: CGPoint(x: 18.12, y: 28.41))
                        path5.addLine(to: CGPoint(x: 18.12, y: 50.2))
                        path5.addLine(to: CGPoint(x: 18.12, y: 51.41))
                        path5.addLine(to: CGPoint(x: 18.12, y: 52.47))
                        path5.addLine(to: CGPoint(x: 18.53, y: 53.5))
                        path5.addLine(to: CGPoint(x: 18.53, y: 54.78))
                        path5.addLine(to: CGPoint(x: 18.53, y: 56.05))
                        path5.addLine(to: CGPoint(x: 18.53, y: 56.84))
                        path5.addLine(to: CGPoint(x: 18.76, y: 57.91))
                        path5.addLine(to: CGPoint(x: 19.07, y: 59.07))
                        path5.addLine(to: CGPoint(x: 19.43, y: 59.94))
                        path5.addLine(to: CGPoint(x: 19.73, y: 60.73))
                        path5.addLine(to: CGPoint(x: 20.05, y: 61.44))
                        path5.addLine(to: CGPoint(x: 20.48, y: 62.05))
                        path5.addLine(to: CGPoint(x: 20.91, y: 62.68))
                        path5.addLine(to: CGPoint(x: 21.26, y: 63.29))
                        path5.addLine(to: CGPoint(x: 21.83, y: 63.75))
                        path5.addLine(to: CGPoint(x: 22.25, y: 64.17))
                        path5.addLine(to: CGPoint(x: 22.75, y: 64.62))
                        path5.addLine(to: CGPoint(x: 23.37, y: 64.84))
                        path5.addLine(to: CGPoint(x: 23.78, y: 65.2))
                        path5.addLine(to: CGPoint(x: 24.61, y: 65.52))
                        path5.addLine(to: CGPoint(x: 25.14, y: 65.79))
                        path5.addLine(to: CGPoint(x: 26.07, y: 66.05))
                        path5.addLine(to: CGPoint(x: 26.78, y: 66.05))
                        path5.addLine(to: CGPoint(x: 27.72, y: 66.31))
                        path5.addLine(to: CGPoint(x: 28.44, y: 66.31))
                        path5.addLine(to: CGPoint(x: 29.69, y: 66.31))
                        path5.addLine(to: CGPoint(x: 30.61, y: 66.31))
                        path5.addLine(to: CGPoint(x: 31.3, y: 66.55))
                        path5.addLine(to: CGPoint(x: 31.3, y: 66.9))
                        path5.addLine(to: CGPoint(x: 30.61, y: 67.65))
                        path5.addLine(to: CGPoint(x: 29.69, y: 68.06))
                        path5.addLine(to: CGPoint(x: 28.65, y: 68.49))
                        path5.addLine(to: CGPoint(x: 27.72, y: 68.88))
                        path5.addLine(to: CGPoint(x: 26.46, y: 69.33))
                        path5.addLine(to: CGPoint(x: 25.55, y: 69.55))
                        path5.addLine(to: CGPoint(x: 24.61, y: 69.79))
                        path5.addLine(to: CGPoint(x: 23.78, y: 69.79))
                        path5.addLine(to: CGPoint(x: 22.96, y: 69.79))
                        path5.addLine(to: CGPoint(x: 21.83, y: 69.79))
                        path5.addLine(to: CGPoint(x: 20.91, y: 70))
                        path5.addLine(to: CGPoint(x: 20.05, y: 70))
                        path5.addLine(to: CGPoint(x: 19.07, y: 70))
                        path5.addLine(to: CGPoint(x: 17.88, y: 70))
                        path5.addLine(to: CGPoint(x: 16.88, y: 69.79))
                        path5.addLine(to: CGPoint(x: 15.92, y: 69.55))
                        path5.addLine(to: CGPoint(x: 14.71, y: 69.33))
                        path5.addLine(to: CGPoint(x: 13.4, y: 68.88))
                        path5.addLine(to: CGPoint(x: 12.23, y: 68.49))
                        path5.addLine(to: CGPoint(x: 11.13, y: 68.06))
                        path5.addLine(to: CGPoint(x: 10.06, y: 67.2))
                        path5.addLine(to: CGPoint(x: 8.77, y: 66.55))
                        path5.addLine(to: CGPoint(x: 7.94, y: 66.05))
                        path5.addLine(to: CGPoint(x: 6.98, y: 65.2))
                        path5.addLine(to: CGPoint(x: 6.1, y: 64.4))
                        path5.addLine(to: CGPoint(x: 5.29, y: 63.54))
                        path5.addLine(to: CGPoint(x: 4.61, y: 62.68))
                        path5.addLine(to: CGPoint(x: 3.97, y: 62.05))
                        path5.addLine(to: CGPoint(x: 3.25, y: 61.01))
                        path5.addLine(to: CGPoint(x: 2.59, y: 59.94))
                        path5.addLine(to: CGPoint(x: 2.09, y: 59.07))
                        path5.addLine(to: CGPoint(x: 1.73, y: 57.91))
                        path5.addLine(to: CGPoint(x: 1.35, y: 56.84))
                        path5.addLine(to: CGPoint(x: 1.13, y: 56.05))
                        path5.addLine(to: CGPoint(x: 0.76, y: 55.29))
                        path5.addLine(to: CGPoint(x: 0.76, y: 54.47))
                        path5.addLine(to: CGPoint(x: 0.76, y: 53.79))
                        path5.addLine(to: CGPoint(x: 0.4, y: 53.05))
                        path5.addLine(to: CGPoint(x: 0.4, y: 52.47))
                        path5.addLine(to: CGPoint(x: 0, y: 1.36))
                        path5.addLine(to: CGPoint(x: 0.76, y: 1.36))
                        path5.close()
                        path5.move(to: CGPoint(x: 0.76, y: 1.36))
                        context.saveGState()
                        path5.usesEvenOddFillRule = true
                        context.saveGState()
                        path5.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                          UIColor(hue: 0.553, saturation: 0.785, brightness: 0.894, alpha: 1).cgColor,
                                          UIColor(hue: 0.577, saturation: 0.931, brightness: 0.51, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                              start: CGPoint(x: 17.5, y: 0),
                              end: CGPoint(x: 17.5, y: 70),
                              options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Path 6
                        let path6 = UIBezierPath()
                        path6.move(to: CGPoint(x: 0, y: 1.6))
                        path6.addLine(to: CGPoint(x: 0, y: 4.89))
                        path6.addLine(to: CGPoint(x: 0, y: 7.12))
                        path6.addLine(to: CGPoint(x: 0.15, y: 8.7))
                        path6.addLine(to: CGPoint(x: 0.49, y: 9.99))
                        path6.addLine(to: CGPoint(x: 0.85, y: 11.2))
                        path6.addLine(to: CGPoint(x: 1.41, y: 12.31))
                        path6.addLine(to: CGPoint(x: 1.98, y: 13.28))
                        path6.addLine(to: CGPoint(x: 2.48, y: 14.07))
                        path6.addLine(to: CGPoint(x: 3.39, y: 15))
                        path6.addLine(to: CGPoint(x: 4.34, y: 15.63))
                        path6.addLine(to: CGPoint(x: 5.22, y: 16.07))
                        path6.addLine(to: CGPoint(x: 6.13, y: 16.43))
                        path6.addLine(to: CGPoint(x: 7.26, y: 16.7))
                        path6.addLine(to: CGPoint(x: 8.27, y: 16.88))
                        path6.addLine(to: CGPoint(x: 9.22, y: 17))
                        path6.addLine(to: CGPoint(x: 10.03, y: 17))
                        path6.addLine(to: CGPoint(x: 10.65, y: 17))
                        path6.addLine(to: CGPoint(x: 11.54, y: 17))
                        path6.addLine(to: CGPoint(x: 12.29, y: 17))
                        path6.addLine(to: CGPoint(x: 12.71, y: 17))
                        path6.addLine(to: CGPoint(x: 13, y: 17))
                        path6.addLine(to: CGPoint(x: 12.82, y: 0))
                        path6.addLine(to: CGPoint(x: 12.09, y: 0.54))
                        path6.addLine(to: CGPoint(x: 11.54, y: 0.95))
                        path6.addLine(to: CGPoint(x: 10.95, y: 1.42))
                        path6.addLine(to: CGPoint(x: 10.44, y: 1.75))
                        path6.addLine(to: CGPoint(x: 9.82, y: 2.13))
                        path6.addLine(to: CGPoint(x: 9.22, y: 2.41))
                        path6.addLine(to: CGPoint(x: 8.41, y: 2.78))
                        path6.addLine(to: CGPoint(x: 7.67, y: 3.12))
                        path6.addLine(to: CGPoint(x: 7.14, y: 3.31))
                        path6.addLine(to: CGPoint(x: 6.33, y: 3.65))
                        path6.addLine(to: CGPoint(x: 5.57, y: 3.89))
                        path6.addLine(to: CGPoint(x: 4.78, y: 4.1))
                        path6.addLine(to: CGPoint(x: 3.94, y: 4.19))
                        path6.addLine(to: CGPoint(x: 3.13, y: 4.1))
                        path6.addLine(to: CGPoint(x: 2.29, y: 3.65))
                        path6.addLine(to: CGPoint(x: 1.74, y: 3.31))
                        path6.addLine(to: CGPoint(x: 1.2, y: 2.9))
                        path6.addLine(to: CGPoint(x: 0.85, y: 2.41))
                        path6.addLine(to: CGPoint(x: 0, y: 1.6))
                        path6.close()
                        path6.move(to: CGPoint(x: 0, y: 1.6))
                        context.saveGState()
                        context.translateBy(x: 18, y: 50)
                        path6.usesEvenOddFillRule = true
                        context.saveGState()
                        path6.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                          UIColor(hue: 0.072, saturation: 0.893, brightness: 0.539, alpha: 1).cgColor,
                                          UIColor(hue: 0.067, saturation: 0.842, brightness: 0.941, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                              start: CGPoint(x: 0, y: 2.51),
                              end: CGPoint(x: 13, y: 8.5),
                              options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                        context.restoreGState()
                        
                        context.restoreGState()
                  }
                  
                  /// o
                  do {
                        context.saveGState()
                        context.translateBy(x: 102, y: 14)
                        
                        /// Oval 3
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 56, height: 56))
                        context.saveGState()
                        context.saveGState()
                        oval2.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                          UIColor(hue: 0.96, saturation: 0.775, brightness: 0.714, alpha: 1).cgColor,
                                          UIColor(hue: 0.911, saturation: 0.733, brightness: 0.91, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                              start: CGPoint(x: 21, y: 2.02),
                              end: CGPoint(x: 37.8, y: 24.54),
                              options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Path 7
                        let path7 = UIBezierPath()
                        path7.move(to: CGPoint(x: 36, y: 1))
                        path7.addLine(to: CGPoint(x: 31, y: 0))
                        path7.addLine(to: CGPoint(x: 26, y: 0))
                        path7.addLine(to: CGPoint(x: 24, y: 0))
                        path7.addLine(to: CGPoint(x: 19, y: 0.98))
                        path7.addLine(to: CGPoint(x: 15, y: 2.95))
                        path7.addLine(to: CGPoint(x: 12, y: 4.91))
                        path7.addLine(to: CGPoint(x: 9, y: 6.88))
                        path7.addLine(to: CGPoint(x: 6, y: 9.82))
                        path7.addLine(to: CGPoint(x: 4, y: 12.77))
                        path7.addLine(to: CGPoint(x: 2, y: 15.71))
                        path7.addLine(to: CGPoint(x: 1, y: 18.66))
                        path7.addLine(to: CGPoint(x: 0, y: 22.59))
                        path7.addLine(to: CGPoint(x: 0, y: 26.52))
                        path7.addLine(to: CGPoint(x: 0, y: 31.43))
                        path7.addLine(to: CGPoint(x: 1, y: 36.34))
                        path7.addLine(to: CGPoint(x: 2, y: 39.29))
                        path7.addLine(to: CGPoint(x: 4, y: 42.23))
                        path7.addLine(to: CGPoint(x: 6, y: 45.18))
                        path7.addLine(to: CGPoint(x: 9, y: 49))
                        path7.addLine(to: CGPoint(x: 12, y: 51.07))
                        path7.addLine(to: CGPoint(x: 15, y: 53.04))
                        path7.addLine(to: CGPoint(x: 18, y: 54.02))
                        path7.addLine(to: CGPoint(x: 20, y: 55))
                        path7.addLine(to: CGPoint(x: 25, y: 52))
                        path7.addLine(to: CGPoint(x: 28, y: 50.09))
                        path7.addLine(to: CGPoint(x: 31, y: 47))
                        path7.addLine(to: CGPoint(x: 34, y: 43))
                        path7.addLine(to: CGPoint(x: 36, y: 40))
                        path7.addLine(to: CGPoint(x: 38, y: 34))
                        path7.addLine(to: CGPoint(x: 38, y: 33.39))
                        path7.addLine(to: CGPoint(x: 37, y: 34.38))
                        path7.addLine(to: CGPoint(x: 34, y: 36.34))
                        path7.addLine(to: CGPoint(x: 31, y: 38.3))
                        path7.addLine(to: CGPoint(x: 29, y: 38.3))
                        path7.addLine(to: CGPoint(x: 27, y: 38.3))
                        path7.addLine(to: CGPoint(x: 24, y: 37.32))
                        path7.addLine(to: CGPoint(x: 22, y: 36.34))
                        path7.addLine(to: CGPoint(x: 20, y: 34.38))
                        path7.addLine(to: CGPoint(x: 18, y: 31.43))
                        path7.addLine(to: CGPoint(x: 18, y: 28.48))
                        path7.addLine(to: CGPoint(x: 18, y: 25.54))
                        path7.addLine(to: CGPoint(x: 17, y: 26))
                        path7.addLine(to: CGPoint(x: 18, y: 19.64))
                        path7.addLine(to: CGPoint(x: 19, y: 15.71))
                        path7.addLine(to: CGPoint(x: 20, y: 12.77))
                        path7.addLine(to: CGPoint(x: 22, y: 9.82))
                        path7.addLine(to: CGPoint(x: 25, y: 5.89))
                        path7.addLine(to: CGPoint(x: 27, y: 4))
                        path7.addLine(to: CGPoint(x: 31, y: 1.96))
                        path7.addLine(to: CGPoint(x: 36, y: 1))
                        path7.close()
                        path7.move(to: CGPoint(x: 36, y: 1))
                        context.saveGState()
                        path7.usesEvenOddFillRule = true
                        context.saveGState()
                        path7.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                          UIColor(hue: 0.55, saturation: 0.796, brightness: 0.902, alpha: 1).cgColor,
                                          UIColor(hue: 0.574, saturation: 0.896, brightness: 0.525, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                              start: CGPoint(x: 19, y: 0),
                              end: CGPoint(x: 19, y: 55),
                              options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Oval 4
                        let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 23, height: 23))
                        context.saveGState()
                        context.translateBy(x: 17, y: 16)
                        UIColor(hue: 1, saturation: 0.006, brightness: 1, alpha: 1).setFill()
                        oval5.fill()
                        context.restoreGState()
                        
                        context.restoreGState()
                  }
                  
                  /// orgullo
                do {
                        context.saveGState()
                        context.translateBy(x: 64, y: 73)
                        
                        /// orgullo y
                        let orgulloY = NSMutableAttributedString(string: "orgullo y")
                        orgulloY.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: orgulloY.length))
                        orgulloY.addAttribute(.foregroundColor, value: UIColor(hue: 0.546, saturation: 0.969, brightness: 0.882, alpha: 1), range: NSRange(location: 0, length: orgulloY.length))
                        do {
                              let paragraphStyle = NSMutableParagraphStyle()
                              paragraphStyle.alignment = .right
                              orgulloY.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: orgulloY.length))
                        }
                        context.saveGState()
                        orgulloY.draw(in: CGRect(x: 0, y: 0, width: 94, height: 17))
                        context.restoreGState()
                        
                        /// Compromiso
                        let compromiso = NSMutableAttributedString(string: "Compromiso")
                        compromiso.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: compromiso.length))
                        compromiso.addAttribute(.foregroundColor, value: UIColor(hue: 0.546, saturation: 0.969, brightness: 0.882, alpha: 1), range: NSRange(location: 0, length: compromiso.length))
                        do {
                              let paragraphStyle = NSMutableParagraphStyle()
                              paragraphStyle.alignment = .right
                              compromiso.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: compromiso.length))
                        }
                        context.saveGState()
                        compromiso.draw(in: CGRect(x: 0, y: 15, width: 94, height: 17))
                        context.restoreGState()
                        
                        /// de todos
                        let deTodos = NSMutableAttributedString(string: "de todos")
                        deTodos.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: deTodos.length))
                        deTodos.addAttribute(.foregroundColor, value: UIColor(hue: 0.546, saturation: 0.969, brightness: 0.882, alpha: 1), range: NSRange(location: 0, length: deTodos.length))
                        do {
                              let paragraphStyle = NSMutableParagraphStyle()
                              paragraphStyle.alignment = .center
                              deTodos.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: deTodos.length))
                        }
                        context.saveGState()
                        deTodos.draw(at: CGPoint(x: 38, y: 30))
                        context.restoreGState()
                        
                        context.restoreGState()
                  }
                  
                  context.restoreGState()
            }
            
            context.restoreGState()
      }
      
      
      //MARK: - Canvas Images
      
      /// Page 1
      
      class func imageOfUpdate() -> UIImage {
            struct LocalCache {
                  static var image: UIImage!
            }
            if LocalCache.image != nil {
                  return LocalCache.image
            }
            var image: UIImage
            
            UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 568), false, 0)
            UpdateView.drawUpdate()
            image = UIGraphicsGetImageFromCurrentImageContext()!
            UIGraphicsEndImageContext()
            
            LocalCache.image = image
            return image
      }
      
      
      //MARK: - Resizing Behavior
      
      enum ResizingBehavior {
            case aspectFit /// The content is proportionally resized to fit into the target rectangle.
            case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
            case stretch /// The content is stretched to match the entire target rectangle.
            case center /// The content is centered in the target rectangle, but it is NOT resized.
            
            func apply(rect: CGRect, target: CGRect) -> CGRect {
                  if rect == target || target == CGRect.zero {
                        return rect
                  }
                  
                  var scales = CGSize.zero
                  scales.width = abs(target.width / rect.width)
                  scales.height = abs(target.height / rect.height)
                  
                  switch self {
                        case .aspectFit:
                              scales.width = min(scales.width, scales.height)
                              scales.height = scales.width
                        case .aspectFill:
                              scales.width = max(scales.width, scales.height)
                              scales.height = scales.width
                        case .stretch:
                              break
                        case .center:
                              scales.width = 1
                              scales.height = 1
                  }
                  
                  var result = rect.standardized
                  result.size.width *= scales.width
                  result.size.height *= scales.height
                  result.origin.x = target.minX + (target.width - result.width) / 2
                  result.origin.y = target.minY + (target.height - result.height) / 2
                  return result
            }
      }
      
      
}



